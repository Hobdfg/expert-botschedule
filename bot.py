import telebot
from telebot import types
import math
import json
import re

from time import sleep
from info import get_commands
from db import (prepare_db,
                count_user_blocks, count_project_blocks,
                count_user_tokens, count_project_tokens,
                count_users, is_user_exists,
                load_gpt_message, store_gpt_message,
                store_stt_message,
                load_schedule, store_schedule, delete_schedule,
                load_schedule_days,
                load_schedule_now)
from yandex_gpt import GPT
from creds import CRED
from speechkit import STT

import scheduler
import logging
import config
import utils


bot = telebot.TeleBot(token=utils.get_telegram_token())

cred = CRED(iam_token=utils.get_iam_token())

stt = STT(url=config.URL_STT,
          cred=cred,
          folder_id=utils.get_folder_id())

gpt = GPT(url=config.URL_GPT,
          cred=cred,
          folder_id=utils.get_folder_id())


def scheduler_handler():
    while True:
        sleep(config.SCHEDULER_PERIODS)
        tasks = load_schedule_now()
        for task in tasks:
            user_id = task[0]
            time = task[1]
            lesson = task[2]
            bot.send_message(user_id,
                             text=f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–±—ã—Ç–∏—è\n'
                                  f'{time} - {lesson}')

            create_motivation_message(user_id, user_prompt=lesson)


def voice_to_text(message):
    user_id = message.from_user.id

    # –°—á–∏—Ç–∞–µ–º –∞—É–¥–∏–æ–±–ª–æ–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ–±–ª–æ–∫–æ–≤
    status, result = is_stt_block_limit(user_id, message.voice.duration)
    if not status:
        return status, result

    stt_blocks = result
    file_id = message.voice.file_id  # –ø–æ–ª—É—á–∞–µ–º id –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    file_info = bot.get_file(file_id)  # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    file = bot.download_file(file_info.file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç SpeechKit
    status, text = stt.speech_to_text(file)  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å True - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, –∏–Ω–∞—á–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if status:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–ª-–≤–æ –∞—É–¥–∏–æ–±–ª–æ–∫–æ–≤ –≤ –ë–î
        store_stt_message(user_id, text, stt_blocks)

    return status, text


def response_stt(message):
    user_id = message.from_user.id
    msg = bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –ø–µ—Ä–µ–≤–µ–ª –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç')
    bot.register_next_step_handler(msg, stt_handler)


# –ü–µ—Ä–µ–≤–æ–¥–∏–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã stt
def stt_handler(message):
    user_id = message.from_user.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    if process_command(message, text):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ
    if message.content_type != 'voice':
        msg = bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        bot.register_next_step_handler(msg, stt_handler)
        return

    status, text = voice_to_text(message)

    if status:
        msg = bot.send_message(user_id, text, reply_to_message_id=message.id)
        bot.register_next_step_handler(msg, stt_handler)
    else:
        keyboard = create_keyboard([{'text': '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'}])
        send_error_message(user_id, text, keyboard, stt_handler)


def create_user_prompt(action, message):
    user_id = message.from_user.id
    text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    if action == 'add':
        text += ' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
    elif action == 'delete':
        text += ' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
    msg = bot.send_message(user_id,
                           text=text,
                           reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, get_user_prompt, args=action)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    store_gpt_message(user_id, message=[], tokens=0)


def response_get_schedule(message):
    user_id = message.from_user.id

    days = load_schedule_days(user_id)
    if len(days) > 0:
        days_keys = []
        for day in days:
            days_keys.append({'text': day})
        keyboard = create_keyboard(days_keys)
        msg = bot.send_message(user_id,
                         text='–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
                         reply_markup=keyboard)
        bot.register_next_step_handler(msg, get_schedule_handler)
    else:
        bot.send_message(user_id,
                         text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ü•≤',
                         reply_markup=types.ReplyKeyboardRemove())


def get_schedule_handler(message):
    user_id = message.from_user.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    if process_command(message, text):
        return

    send_schedule(user_id, text)


def send_schedule(user_id, day):
    schedule = ''
    rows = load_schedule(user_id, day=day)
    for row in rows:
        if schedule:
            schedule += '\n'
        schedule += f'{row[0]} - {row[1]}'
    if schedule:
        bot.send_message(user_id,
                         text=f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:\n{schedule}',
                         reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(user_id,
                         text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ü•≤',
                         reply_markup=types.ReplyKeyboardRemove())


def response_add_schedule(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not utils.is_superuser(user_id) and not is_user_exists(user_id):
        users_count = count_users()
        if users_count >= config.MAX_USERS:
            logging.warning(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç {config.MAX_USERS}')
            bot.send_message(user_id,
                             text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π :(',
                             reply_markup=types.ReplyKeyboardRemove())
            return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_user_prompt(action='add', message=message)


def response_delete_schedule(message):
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_user_prompt(action='delete', message=message)


def generate_answer(user_id, messages):
    status, result = gpt.count_tokens_in_dialog(messages)
    if not status:
        return status, result
    messages_tokens = result

    if not utils.is_superuser(user_id):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç
        user_tokens = count_user_tokens(user_id)
        if user_tokens + messages_tokens + config.MAX_MODEL_TOKENS > config.MAX_USER_TOKENS:
            logging.warning(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–µ–≤—ã—à–∞–µ—Ç {config.MAX_USER_TOKENS}')
            return False, (f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å–µ—Å—Å–∏–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {config.MAX_USER_TOKENS}, '
                           f'—É–º–µ–Ω—å—à–∏ –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–µ–∫—Ç
        project_tokens = count_project_tokens()
        if project_tokens + messages_tokens + config.MAX_MODEL_TOKENS > config.MAX_PROJECT_TOKENS:
            logging.warning(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {config.MAX_PROJECT_TOKENS}')
            return False, (f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {config.MAX_PROJECT_TOKENS}, '
                           f'—É–º–µ–Ω—å—à–∏ –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
    request = gpt.make_request(messages)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
    status, response = gpt.send_request(request)
    if not status:
        return status, response

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT
    status, content = gpt.process_response(response)
    if not status:
        return status, content

    message = gpt.get_result_data()['alternatives'][0]['message']
    messages.append(message)

    total_tokens = utils.to_int(gpt.get_result_data()['usage']['totalTokens'])

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ë–î
    store_gpt_message(user_id, messages, total_tokens)

    return True, content


def create_motivation_message(user_id, user_prompt):
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞
    messages = [
        {'role': 'system', 'text': config.SYSTEM_PROMPT_MOTIVATION},
        {'role': 'user', 'text': user_prompt}
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex GPT
    status, result = generate_answer(user_id, messages)

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
    if status:
        bot.send_message(user_id,
                         text=result,
                         reply_markup=types.ReplyKeyboardRemove())

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç
    if not status:
        send_error_message(user_id, result)


def create_prompts(user_id, system_prompt, user_prompt):
    messages = load_gpt_message(user_id)

    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞
    if len(messages) == 0:
        messages.append({'role': 'system', 'text': system_prompt})

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç
    messages.append({'role': 'user', 'text': user_prompt})

    return messages


def create_answer(message, user_prompt, action):
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø—Ä–æ–º—Ç–∞–º–∏
    messages = create_prompts(user_id, system_prompt=config.SYSTEM_PROMPT_SCHEDULE, user_prompt=user_prompt)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex GPT
    status, result = generate_answer(user_id, messages)

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
    if status:
        status, result = process_answer(result)

    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç
    if status:
        day = result['day']
        time = result['time']
        lesson = result['lesson']
        if action == 'add':
            store_schedule(user_id, day, time, lesson)
            send_schedule(user_id, day)
        elif action == 'delete':
            delete_schedule(user_id, day, time)
            send_schedule(user_id, day)
        else:
            status = False
            result = f'–¥–µ–π—Å—Ç–≤–∏–µ {action} –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç
    if not status:
        keyboard = create_keyboard([{'text': '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑'}])
        send_error_message(user_id, result, keyboard, create_answer_again, user_prompt)


def process_answer(answer):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ json
    data = {}
    try:
        pattern = r"({[\w\W]+?})"
        jsons = re.findall(pattern, answer)
        if len(jsons) > 0:
            data = json.loads(jsons[0])
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ Yandex GPT, {e}')
        return False, '–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ Yandex GPT'

    if 'day' not in data or 'time' not in data:
        return False, '–≤ –æ—Ç–≤–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –Ω–µ –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã'
    if 'lesson' not in data:
        data['lesson'] = None

    return True, data


def create_answer_again(message, args):
    if not process_command(message, message.text):
        if message.text == '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑':
            user_prompt = args
        else:
            user_prompt = message.text
        create_answer(message, user_prompt)


def send_error_message(user_id, error_message, keyboard=None, next_step_handler=None, next_step_args=None):
    if not keyboard:
        keyboard = types.ReplyKeyboardRemove()

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = bot.send_message(user_id,
                           text=f'–Ø –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å, —Ç–∞–∫ –∫–∞–∫ {error_message}',
                           reply_markup=keyboard)

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π "—à–∞–≥"
    if next_step_handler and next_step_args:
        bot.register_next_step_handler(msg, next_step_handler, args=next_step_args)
    elif next_step_handler:
        bot.register_next_step_handler(msg, next_step_handler)



def is_stt_block_limit(user_id, duration):
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ –∞—É–¥–∏–æ–±–ª–æ–∫–∏
    audio_blocks = math.ceil(duration / config.AUDIO_BLOCK)  # –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
    # –§—É–Ω–∫—Ü–∏—è –∏–∑ –ë–î –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∞—É–¥–∏–æ–±–ª–æ–∫–æ–≤
    all_blocks = count_user_blocks(user_id) + audio_blocks

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –¥–ª–∏—Ç—Å—è –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥
    if duration < 1:
        return False, 'SpeechKit STT —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –¥–ª–∏—Ç—Å—è –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥
    if duration >= 30:
        return False, 'SpeechKit STT —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥'

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º all_blocks —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞—É–¥–∏–æ–±–ª–æ–∫–æ–≤
    if all_blocks >= config.MAX_USER_STT_BLOCKS:
        msg = (f"–ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π –ª–∏–º–∏—Ç SpeechKit STT {config.MAX_USER_STT_BLOCKS}. "
               f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {all_blocks} –±–ª–æ–∫–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {config.MAX_USER_STT_BLOCKS - all_blocks}")
        return False, msg

    return True, audio_blocks


def get_user_prompt(message, args=None):
    user_id = message.from_user.id
    text = message.text
    action = args

    if process_command(message, text):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ
    if message.content_type == 'voice':
        status, text = voice_to_text(message)
    elif message.content_type == 'video_note':
        text = '–ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫—Ä—É–∂–∫–∞–º–∏'
        status = False
    else:
        status = True

    if status:
        bot.send_message(user_id,
                         text='‚åõÔ∏è –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å',
                         reply_markup=types.ReplyKeyboardRemove())
        create_answer(message, user_prompt=text, action=action)
    else:
        send_error_message(user_id, text)


def create_keyboard(buttons_list):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    for button in buttons_list:
        keyboard.add(types.KeyboardButton(text=button['text']))
    return keyboard


def create_inline_keyboard(buttons_list):
    keyboard = types.InlineKeyboardMarkup()
    for button in buttons_list:
        keyboard.add(types.InlineKeyboardButton(text=button['text'], callback_data=button['callback_data']))
    return keyboard


def response_start(message):
    user_id = message.from_user.id
    bot.send_message(user_id,
                     parse_mode='MarkdownV2',
                     text=f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—é, '
                          '–æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /add, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —è —Ç–µ–±—è —É–≤–µ–¥–æ–º–ª—é, –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç, '
                          '–±—É–¥—É —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏\\.\n\n'
                          '–ê –µ—â–µ —è –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
                          commands_to_string(),
                     reply_markup=types.ReplyKeyboardRemove())


def response_help(message):
    user_id = message.from_user.id
    bot.send_message(user_id,
                     parse_mode='MarkdownV2',
                     text=f'–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n\n' +
                          commands_to_string(),
                     reply_markup=types.ReplyKeyboardRemove())


def response_stats(message):
    user_id = message.from_user.id
    project_blocks = count_project_blocks()
    project_tokens = count_project_tokens()
    users_count = count_users()
    bot.send_message(user_id,
                     text=f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ SpeechKit STT: {project_blocks}\n'
                          f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ Yandex GPT: {project_tokens}\n'
                          f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}',
                     reply_markup=types.ReplyKeyboardRemove())


def response_debug(message):
    log_file_name = config.LOG_FILENAME
    with open(log_file_name, "rb") as f:
        bot.send_document(message.chat.id, f)


def process_command(message, text):
    is_processed = False
    if text:
        for command in commands:
            handler = None
            if command['command'] == text.lower():
                handler = command['handler']
            else:
                keywords = command['keywords']
                for keyword in keywords:
                    if keyword == text.lower():
                        handler = command['handler']
            if handler:
                handler(message)
                is_processed = True
    return is_processed


def process_message(message, text):
    if not process_command(message, text):
        bot.send_message(message.chat.id,
                         parse_mode='MarkdownV2',
                         text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å\n' +
                              '–Ø –ø–æ–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                              commands_to_string())

        reaction = telebot.types.ReactionTypeEmoji(emoji='üò¢')
        bot.set_message_reaction(message_id=message.id, chat_id=message.chat.id, reaction=[reaction])


def commands_to_string():
    result = ''
    for command in commands:
        if command['command'] and command['description'] and not command['hidden']:
            result += f"*{command['command']}* \\- {command['description']}\n"
    return result


@bot.message_handler(content_types=['text'])
def text_message(message):
    process_message(message, message.text)


@bot.message_handler(content_types=['voice'])
def media_message(message):
    process_message(message, message.text)


@bot.message_handler(content_types=['sticker'])
def media_message(message):
    bot.send_message(message.chat.id, text='–ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Äüëç')


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.edit_message_reply_markup(call.message.chat.id, call.message.id)

    process_message(call.message, call.data)
    bot.answer_callback_query(call.id)


menu_commands = []
commands = get_commands({'response_start': response_start,
                         'response_help': response_help,
                         'response_stt': response_stt,
                         'response_stats': response_stats,
                         'response_debug': response_debug,
                         'response_get_schedule': response_get_schedule,
                         'response_add_schedule': response_add_schedule,
                         'response_delete_schedule': response_delete_schedule
                         })
for command in commands:
    if command['command'] and command['description'] and not command['hidden']:
        menu_commands.append(telebot.types.BotCommand(command['command'], command['description']))

prepare_db()
scheduler.scheduler_start(scheduler_handler)
try:
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.set_my_commands(menu_commands)
    bot.polling(non_stop=True)
except Exception as e:
    logging.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Telegram, {e}')
    exit()
